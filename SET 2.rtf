{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Arial Black;}{\f1\fnil\fcharset0 Arial;}{\f2\fnil\fcharset0 Calibri;}}
{\*\generator Riched20 10.0.22621}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\b\f0\fs44\lang9 ALGO SET - 2\par
\b0\f1\fs22 --------------------------------------------\par
 quesion-1\par
max subarray\par
\par
\par
#include <stdio.h>\par
\par
int maxSubArray(int* nums, int numsSize) \{\par
    int maxSum = 0; \par
    int currentSum = 0;   \par
\par
    for (int i = 0; i < numsSize; i++) \{\par
        currentSum += nums[i];        \par
\par
        if (currentSum > maxSum) \{    \par
            maxSum = currentSum;\par
        \}\par
\par
        if (currentSum < 0) \{          \par
            currentSum = 0;\par
        \}\par
    \}\par
    return maxSum; \par
\}\par
\par
int main() \{\par
    int nums[] = \{-2, 1, -3, 4, -1, 2, 1, -5, 4\};\par
    int numsSize = sizeof(nums) / sizeof(nums[0]);\par
    \par
    int result = maxSubArray(nums, numsSize);\par
    printf("The largest sum of a subarray is: %d\\n", result);\par
    \par
    return 0;\par
\}\par
-------------------------------------------------------------------------------------------------------------------\par
\f2 question -2\par
Inversion no. In array\par
\par
\par
\par
#include <iostream>\par
using namespace std;\par
int main() \{\par
   int arr[4]=\{7,2,6,3\};\par
   int c1=0;\par
   for(int i=0;i<=4;i++)\{\par
       for(int j=i+1;j<=4;j++)\{\par
       if(arr[i]>arr[j])\{\par
           c1=c1+1;\par
       \}\par
           \par
       \}\par
   \}\par
   cout<<c1;\par
    return 0;\par
\}\par
---------------------------------------------------------------------------------------------------------\par
question-3\par
N largest no. In array\par
\par
#include <iostream>\par
using namespace std;\par
int main() \{\par
   int n=6;\par
   int arr[n]=\{3,2,1,5,6,4\};\par
   int max=0;\par
   int max2=0;\par
   for(int i=0;i<=n-1;i++)\{\par
       if(arr[i]>max)\{\par
           max=arr[i];\par
       \}\par
   \}\par
   cout<<"Largest array is:"<<max<<"\\n";\par
for(int i=0;i<=n-1;i++)\{\par
       if(arr[i]!=max)\{\par
           if(arr[i]>max2)\{\par
               max2=arr[i];\par
           \}\par
       \}\par
   \}\par
   cout<<"second largest array is:"<<max2;\par
\par
    return 0;\par
\}\par
-----------------------------------------------------------------------------------------------------\par
 question-4\par
Palindrome find in string\par
\par
\par
#include <stdio.h>\par
#include <string.h>\par
int main() \{\par
char str[100];\par
    printf("Enter string :");\par
    gets(str);\par
    int len=strlen(str);\par
    int co=len/2;\par
    int count=0;\par
    for(int i=0;i<=len;i++)\{\par
        if(str[i]==str[len-i-1])\{\par
            count++;\par
        \}\par
        \par
    \}\par
    \par
    if(count>=co)\{\par
        printf("String is palendrom");\par
        \par
    \}else\{\par
        printf("It is not palindrome");\par
    \}\par
    return 0;\par
\}\par
----------------------------------------------------------------------------------------------------------------\par
question 5\par
Majority element in array\par
\par
#include <stdio.h>\par
\par
int majority (int arr1[]) \par
\{\par
\tab int n=9;\par
\tab int n2=n/2;\par
\tab for(int i=0;i<=n;i++)\{\par
\tab\tab int count=0;\par
\tab\tab for(int j=0;j<=n;j++)\{\par
\tab\tab\tab if(arr1[i]==arr1[j])\{\par
\tab\tab\tab\tab count++;\par
\tab\tab\tab\}\par
\tab\tab\}\par
\tab\tab if(count>=n2)\{\par
\tab\tab\tab printf("Majority element is %d",arr1[i]);\par
\tab\tab\tab break;\par
\tab\tab\}\par
\tab\}\par
\tab return 0;\par
\}\par
\par
int main()\par
\{\par
\tab\tab int n=9;\par
  int arr[n];\par
  for(int i=0;i<=n;i++)\{\par
      printf("Enter the element:");\par
      scanf("%d\\n",&arr[i]);\par
  \}\par
    majority(arr);\par
\tab return 0;\par
\}\par
---------------------------------------------------------------------------------------------------------------\par
question-6\par
\par
Find pair sum is equal to x in array\par
x=9\par
\par
#include <stdio.h>\par
\par
int main() \{\par
    int n;\par
    printf("Enter the size of N:");\par
    scanf("%d",&n);\par
    int arr[n];\par
    \par
    for(int i=0;i<=n-1;i++)\{\par
       \par
        printf("Enter the value of array");\par
        scanf("%d",&arr[i]);\par
    \}\par
    \par
    int x;\par
    printf("Enter the value of x:");\par
    scanf("%d",&x);\par
    \par
    for(int i=0;i<=n-1;i++)\{\par
        for(int j=1;j<=n;j++)\{\par
            int stor=arr[i]+arr[j];\par
            if(stor==x)\{\par
                printf("yes have");\par
              printf("The pair of x value is %d %d \\n",arr[i],arr[j]);\par
            \}\par
        \}\par
    \}\par
    return 0;\par
\}\par
---------------------------------------------------------------------------------------------------------------\par
question7\par
Unique no. In array\par
\par
\par
#include<iostream>\par
using namespace std;\par
int unique(int arr[],int n,int i)\{\par
\tab\tab for(int j=0;j<n;j++)\{\par
\tab\tab     if(i==j&&i<n)\{\par
\tab\tab         j=j+1;\par
\tab\tab     \}\par
\tab\tab\tab if(arr[i]==arr[j])\{\par
\tab\tab\tab\tab return false;\par
\tab\tab\tab\}\par
\tab\tab\}\par
\tab\tab return true;\par
\}\par
int main()\{\par
\tab int arr[10]=\{5,4,5,6,2,1,3,3,6,9\};\par
\tab for(int i=0;i<10;i++)\{\par
\tab if(unique(arr,10,i))\{\par
\tab\tab cout<<arr[i];\par
\tab\}\par
\tab\}\par
\tab return 0;\par
\}\par
-----------------------------------------------------------------------------------------------------------\par
question 8\par
Heap sort to find max element\par
\par
\par
#include <stdio.h>\par
\par
int * heapify(int num[],int temp[])\par
\{\par
    for(int i=0;i<5;i++)\par
    \{\par
        if(i==0)\par
        \{\par
            temp[i]=num[i];\par
        \}\par
        else\{\par
        int k = i;\par
        temp[i] = num[i];\par
        int j = (i-1)/2;\par
        while(temp[j]<temp[k])\par
        \{\par
            temp[j] = temp[j]^temp[k];\par
            temp[k] = temp[j]^temp[k];\par
            temp[j] = temp[j]^temp[k];\par
            k = j;\par
            j = (k-1)/2;\par
        \}\par
        \}\par
    \}\par
    \par
    return temp;\par
\}\par
\par
void display(int *temp)\par
\{\par
    for(int i=0;i<5;i++)\par
    \{\par
        printf("%d ",*temp);\par
        temp++;\par
    \}\par
\}\par
\par
void main() \par
\{\par
    int num[5],temp[5];\par
    \par
    printf("Enter Elements\\n");\par
    for(int i=0;i<5;i++)\par
    \{     \par
        printf("Enter Element %d:- ",i+1);\par
        scanf("%d",&num[i]);\par
    \}\par
    \par
    int *p = heapify(num,temp);\par
    \par
    display(p);\par
        \par
    printf("\\n");\par
    display(num);\par
\}\par
\par
-----------------------------------------------------------------------------------------------------------\par
nth largest element in heap sort\par
\par
\par
#include <stdio.h>\par
\par
void swap(int* a, int* b) \{\par
    int temp = *a;\par
    *a = *b;\par
    *b = temp;\par
\}\par
\par
\par
void heapify(int arr[], int size, int i) \{\par
    int largest = i;\par
    int left = 2 * i + 1;\par
    int right = 2 * i + 2;\par
\par
    if (left < size && arr[left] > arr[largest]) \{\par
        largest = left;\par
    \}\par
    if (right < size && arr[right] > arr[largest]) \{\par
        largest = right;\par
    \}\par
\par
    if (largest != i) \{\par
        swap(&arr[i], &arr[largest]);\par
        heapify(arr, size, largest);\par
    \}\par
\}\par
\par
void buildHeap(int num[], int temp[], int size) \{\par
    for (int i = 0; i < size; i++) \{\par
        temp[i] = num[i];\par
        int k = i;\par
        while (k > 0) \{\par
            int j = (k - 1) / 2;\par
            if (temp[j] < temp[k]) \par
            \{\par
                swap(&temp[j], &temp[k]);\par
                k = j;\par
            \}\par
            else \{\par
                break;\par
            \}\par
        \}\par
    \}\par
\}\par
\par
\par
\par
int deletion(int arr[], int* size) \{\par
    if (*size <= 0) return -1; \par
\par
    int maxElement = arr[0];\par
   arr[0] = arr[*size - 1];\par
    (*size)--;\par
\par
    heapify(arr, *size, 0);\par
\par
    return maxElement;\par
\}\par
\par
\par
void display(int *arr, int size) \{\par
    for (int i = 0; i < size; i++) \{\par
        printf("%d ", arr[i]);\par
    \}\par
    printf("\\n");\par
\}\par
\par
int main() \{\par
    int num[10], temp[10], deleted[10];\par
    int size = 10;\par
\par
    printf("Enter 10 Elements:\\n");\par
    for (int i = 0; i < size; i++) \{\par
        printf("Enter Element %d: ", i + 1);\par
        scanf("%d", &num[i]);\par
    \}\par
\par
    buildHeap(num, temp, size);\par
    printf("\\nOriginal array: ");\par
    display(num, size);\par
\par
\par
    printf("\\nHeap: ");\par
    display(temp, size);\par
    \par
    for (int i = 0; i < 10; i++) \{\par
        deleted[i] = deletion(temp, &size);\par
    \}\par
\par
    printf("\\nDeleted elements: ");\par
    display(deleted, 10);\par
\par
    int k;\par
    printf("\\n\\nTo get the k'th element\\n");\par
    printf("enter the value of k :- ");\par
    scanf("%d",&k);\par
         if(k<size-1)\par
         printf("\\n\\nvalue of k is out of index ");\par
        \par
         else\par
         \{\par
           printf("\\n\\nthe Kth largest element is :-  %d",deleted[k-1]);\par
         \}\par
        return 0;\par
    \}\par
\par
\par
-----------------------------------------------------------------------------------------------------------\par
}
 